        local ScriptStarted = false
        local Keybind = "B" --Set to whatever you want, has to be the name of a KeyCode Enum.
        local Transparency = true --Will make you slightly transparent when you are invisible. No reason to disable.
        local NoClip = false --Will make your fake character no clip.

        local Player = game:GetService("Players").LocalPlayer
        local RealCharacter = Player.Character or Player.CharacterAdded:Wait()

        local IsInvisible = false

        RealCharacter.Archivable = true
        local FakeCharacter = RealCharacter:Clone()
        local Part
        Part = Instance.new("Part", workspace)
        Part.Anchored = true
        Part.Size = Vector3.new(200, 1, 200)
        Part.CFrame = CFrame.new(0, -100, 0) --Set this to whatever you want, just far away from the map.
        Part.CanCollide = true
        FakeCharacter.Parent = workspace
        FakeCharacter.HumanoidRootPart.CFrame = Part.CFrame * CFrame.new(0, 5, 0)

        for i, v in pairs(RealCharacter:GetChildren()) do
        if v:IsA("LocalScript") then
            local clone = v:Clone()
            clone.Disabled = true
            clone.Parent = FakeCharacter
        end
        end
        if Transparency then
        for i, v in pairs(FakeCharacter:GetDescendants()) do
            if v:IsA("BasePart") then
                v.Transparency = 0.7
            end
        end
        end
        local CanInvis = true
        function RealCharacterDied()
        CanInvis = false
        isinvisible = false
        FakeCharacter:Destroy()
        workspace.CurrentCamera.CameraSubject = RealCharacter.Humanoid

        RealCharacter.Archivable = true
        FakeCharacter = RealCharacter:Clone()
        Part:Destroy()
        Part = Instance.new("Part", workspace)
        Part.Anchored = true
        Part.Size = Vector3.new(200, 1, 200)
        Part.CFrame = CFrame.new(9999, 9999, 9999) --Set this to whatever you want, just far away from the map.
        Part.CanCollide = true
        FakeCharacter.Parent = workspace
        FakeCharacter.HumanoidRootPart.CFrame = Part.CFrame * CFrame.new(0, 5, 0)

        for i, v in pairs(RealCharacter:GetChildren()) do
            if v:IsA("LocalScript") then
                local clone = v:Clone()
                clone.Disabled = true
                clone.Parent = FakeCharacter
            end
        end
        if Transparency then
            for i, v in pairs(FakeCharacter:GetDescendants()) do
                if v:IsA("BasePart") then
                    v.Transparency = 0.7
                end
            end
        end
        RealCharacter.Humanoid.Died:Connect(function()
        RealCharacter:Destroy()
        FakeCharacter:Destroy()
        end)
        Player.CharacterAppearanceLoaded:Connect(RealCharacterDied)
        end
        RealCharacter.Humanoid.Died:Connect(function()
        RealCharacter:Destroy()
        FakeCharacter:Destroy()
        end)
        Player.CharacterAppearanceLoaded:Connect(RealCharacterDied)
        local PseudoAnchor
        game:GetService "RunService".RenderStepped:Connect(
        function()
            if PseudoAnchor ~= nil then
                PseudoAnchor.CFrame = Part.CFrame * CFrame.new(0, 5, 0)
            end
            if NoClip then
            FakeCharacter.Humanoid:ChangeState(11)
            end
        end
        )

        PseudoAnchor = FakeCharacter.HumanoidRootPart
        local function Invisible()
        if IsInvisible == false then
            local StoredCF = RealCharacter.HumanoidRootPart.CFrame
            RealCharacter.HumanoidRootPart.CFrame = FakeCharacter.HumanoidRootPart.CFrame
            FakeCharacter.HumanoidRootPart.CFrame = StoredCF
            RealCharacter.Humanoid:UnequipTools()
            Player.Character = FakeCharacter
            workspace.CurrentCamera.CameraSubject = FakeCharacter.Humanoid
            PseudoAnchor = RealCharacter.HumanoidRootPart
            for i, v in pairs(FakeCharacter:GetChildren()) do
                if v:IsA("LocalScript") then
                    v.Disabled = false
                end
            end

            IsInvisible = true
        else
            local StoredCF = FakeCharacter.HumanoidRootPart.CFrame
            FakeCharacter.HumanoidRootPart.CFrame = RealCharacter.HumanoidRootPart.CFrame
            
            RealCharacter.HumanoidRootPart.CFrame = StoredCF
            
            FakeCharacter.Humanoid:UnequipTools()
            Player.Character = RealCharacter
            workspace.CurrentCamera.CameraSubject = RealCharacter.Humanoid
            PseudoAnchor = FakeCharacter.HumanoidRootPart
            for i, v in pairs(FakeCharacter:GetChildren()) do
                if v:IsA("LocalScript") then
                    v.Disabled = true
                end
            end
            IsInvisible = false
        end
        end

        game:GetService("UserInputService").InputBegan:Connect(
        function(key, gamep)
            if gamep then
                return
            end
            if key.KeyCode.Name:lower() == Keybind:lower() and CanInvis and RealCharacter and FakeCharacter then
                if RealCharacter:FindFirstChild("HumanoidRootPart") and FakeCharacter:FindFirstChild("HumanoidRootPart") then
                    Invisible()
                end
            end
        end
        )
        end)
                UniversalSection:Button("Alter Hub Invis (Mobile)(Don't Use With Flight Script)",function()
                    local offset = 1100 --how far you are away from your camera when invisible
                    local LocalPlayer = game.Players.LocalPlayer
                    local Backpack = LocalPlayer.Backpack
                    local Character = LocalPlayer.Character
                    local invisible = false
                    local grips = {}
                    local heldTool
                    local gripChanged
                    local handle
                    local weld
                    function setDisplayDistance(distance)
                    for _,player in pairs(game.Players:GetPlayers()) do if player.Character and player.Character:FindFirstChildWhichIsA("Humanoid") then player.Character:FindFirstChildWhichIsA("Humanoid").NameDisplayDistance = distance player.Character:FindFirstChildWhichIsA("Humanoid").HealthDisplayDistance = distance end end
                    end
                    local tool = Instance.new("Tool", Backpack)
                    tool.Name = "Alter Invis [Disabled]"
                    tool.RequiresHandle = false
                    tool.CanBeDropped = false
                    tool.Equipped:Connect(function() wait()
                    if not invisible then
                        invisible = true
                        tool.Name = "Alter Invis [Enabled]"
                        if handle then handle:Destroy() end if weld then weld:Destroy() end
                        handle = Instance.new("Part", workspace) handle.Name = "Handle" handle.Transparency = 1 handle.CanCollide = false handle.Size = Vector3.new(2, 1, 1)
                        weld = Instance.new("Weld", handle) weld.Part0 = handle weld.Part1 = Character.HumanoidRootPart weld.C0 = CFrame.new(0, offset-1.5, 0)
                        setDisplayDistance(offset+100)
                        workspace.CurrentCamera.CameraSubject = handle
                        Character.HumanoidRootPart.CFrame = Character.HumanoidRootPart.CFrame * CFrame.new(0, offset, 0)
                        Character.Humanoid.HipHeight = offset
                        Character.Humanoid:ChangeState(11)
                        for _,child in pairs(Backpack:GetChildren()) do if child:IsA("Tool") and child ~= tool then grips[child] = child.Grip end end
                    elseif invisible then
                        invisible = false
                        tool.Name = "Alter Invis [Disabled]"
                        if handle then handle:Destroy() end if weld then weld:Destroy() end
                        for _,child in pairs(Character:GetChildren()) do if child:IsA("Tool") then child.Parent = Backpack end end
                        for tool,grip in pairs(grips) do if tool then tool.Grip = grip end end
                        heldTool = nil
                        setDisplayDistance(100)
                        workspace.CurrentCamera.CameraSubject = Character.Humanoid
                        Character.Animate.Disabled = false
                        Character.HumanoidRootPart.CFrame = Character.HumanoidRootPart.CFrame * CFrame.new(0, -offset, 0)
                        Character.Humanoid.HipHeight = 0
                        Character.Humanoid:ChangeState(11)
                    end
                    tool.Parent = Backpack
                    end)
                    Character.ChildAdded:Connect(function(child) wait()
                    if invisible and child:IsA("Tool") and child ~= heldTool and child ~= tool then
                        heldTool = child
                        local lastGrip = heldTool.Grip
                        if not grips[heldTool] then grips[heldTool] = lastGrip end
                        for _,track in pairs(Character.Humanoid:GetPlayingAnimationTracks()) do track:Stop() end
                        Character.Animate.Disabled = true
                        heldTool.Grip = heldTool.Grip*(CFrame.new(0, offset-1.5, 1.5) * CFrame.Angles(math.rad(-90), 0, 0))
                        heldTool.Parent = Backpack
                        heldTool.Parent = Character
                        if gripChanged then gripChanged:Disconnect() end
                        gripChanged = heldTool:GetPropertyChangedSignal("Grip"):Connect(function() wait()
                            if not invisible then gripChanged:Disconnect() end
                            if heldTool.Grip ~= lastGrip then
                                lastGrip = heldTool.Grip*(CFrame.new(0, offset-1.5, 1.5) * CFrame.Angles(math.rad(-90), 0, 0))
                                heldTool.Grip = lastGrip
                                heldTool.Parent = Backpack
                                heldTool.Parent = Character
                            end
                        end)
                    end
                    end)
